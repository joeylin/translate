/*! jQuery asTooltip - v0.2.0 - 2014-05-13
 * https://github.com/amazingSurge/jquery-asTooltip
 * Copyright (c) 2014 amazingSurge; Licensed GPL */
(function(t) {
    "use strict";

    function e(t, e, n, i, s, o) {
        var a, r, l, h = 0,
            c = 0;
        switch (o ? (a = t, r = 0, l = 0) : (a = t.offset(), r = t.outerWidth(), l = t.outerHeight()), e) {
            case "n":
                h = a.left + r / 2 - n / 2, c = a.top - i - s;
                break;
            case "e":
                h = a.left + r + s, c = a.top + l / 2 - i / 2;
                break;
            case "s":
                h = a.left + r / 2 - n / 2, c = a.top + l + s;
                break;
            case "w":
                h = a.left - n - s, c = a.top + l / 2 - i / 2;
                break;
            case "nw":
            case "wn":
                h = a.left - n + 20, c = a.top - i - s;
                break;
            case "ne":
            case "en":
                h = a.left + r - 20, c = a.top - i - s;
                break;
            case "sw":
            case "ws":
                h = a.left - n + 20, c = a.top + l + s;
                break;
            case "se":
            case "es":
                h = a.left + r - 20, c = a.top + l + s
        }
        return {
            left: Math.round(h),
            top: Math.round(c)
        }
    }

    function n(t, e) {
        var n, i, s = o.scrollLeft(),
            a = o.scrollTop(),
            r = t.offset(),
            l = t.outerWidth(!0),
            h = t.outerHeight(!0),
            c = o.width(),
            p = o.height(),
            u = [];
        return e ? (n = e.outerWidth(!0), i = e.outerHeight(!0)) : (n = 100, i = 50), a + i > r.top && u.push("n"), r.top + h + i > a + p && u.push("s"), s + n > r.left && u.push("w"), r.left + l + n > s + c && u.push("e"), u
    }

    function i() {
        var t = document.body || document.documentElement,
            e = t.style,
            n = "transition";
        if ("string" == typeof e[n]) return !0;
        s = ["Moz", "Webkit", "Khtml", "O", "ms"], n = n.charAt(0).toUpperCase() + n.substr(1);
        for (var i = 0; s.length > i; i++)
            if ("string" == typeof e[s[i] + n]) return !0;
        return !1
    }
    var s, o = t(window),
        a = !1,
        r = [],
        l = "nswe",
        h = {
            n: {
                n: "s",
                w: "ne",
                e: "nw"
            },
            s: {
                s: "n",
                w: "se",
                e: "sw"
            },
            w: {
                w: "e",
                n: "sw",
                s: "nw"
            },
            e: {
                e: "w",
                n: "se",
                s: "ne"
            },
            nw: {
                n: "sw",
                w: "ne"
            },
            ne: {
                n: "se",
                e: "nw"
            },
            sw: {
                s: "nw",
                w: "se"
            },
            se: {
                s: "ne",
                e: "sw"
            }
        }, c = !0;
    i() || (c = !1);
    var p = t.asTooltip = function(e, n) {
        var i = {};
        this.$element = t(e), t.each(this.$element.data(), function(t, e) {
            /^asTooltip/i.test(t) && (i[t.toLowerCase().replace(/^asTooltip/i, "")] = e)
        }), this.options = t.extend({}, p.defaults, n, i), this.namespace = this.options.namespace, this.$element.attr("title") && (this.options.title = this.$element.attr("title"), this.$element.removeAttr("title")), this.content = null, this.target = this.options.target || this.$element, this.isOpen = !1, this.enabled = !0, this.tolerance = null, this.onlyOne = this.options.onlyOne, this._trigger("init"), this.init()
    };
    p.prototype = {
        constructor: p,
        init: function() {
            var n = this.options,
                i = this;
            n.tpl = this.parseTpl(n.tpl), this.$container = t(n.tpl.container), this.$loading = t(n.tpl.loading), this.$arrow = t(n.tpl.arrow), this.$close = t(n.tpl.close), this.$content = t(n.tpl.content), "hover" === n.trigger && (this.target.on("mouseenter.asTooltip", function() {
                return i.isOpen === !0 ? (clearTimeout(this.tolerance), void 0) : (t.proxy(i.show, i)(), void 0)
            }), n.interactive === !0 ? this.target.on("mouseleave.asTooltip", function() {
                var e = !1;
                i.$container.on("mouseenter.asTooltip", function() {
                    e = !0
                }), i.$container.on("mouseleave.asTooltip", function() {
                    e = !1
                }), clearTimeout(this.tolerance), this.tolerance = setTimeout(function() {
                    e === !0 ? i.$container.on("mouseleave.asTooltip", t.proxy(i.hide, i)) : t.proxy(i.hide, i)()
                }, i.options.interactiveDelay)
            }) : this.target.on("mouseleave.asTooltip", t.proxy(i.hide, i)), this.options.mouseTrace === !0 && this.target.on("mousemove.asTooltip", function(t) {
                var n, s = {}, o = t.pageX,
                    a = t.pageY;
                s = {
                    top: a,
                    left: o
                }, n = e(s, i.options.position, i.width, i.height, i.options.popSpace, !0), i.$container.css({
                    display: "block",
                    top: n.top,
                    left: n.left
                })
            })), "click" === n.trigger && this.target.on("click.asTooltip", function() {
                i.isOpen === !0 ? t.proxy(i.hide, i)() : t.proxy(i.show, i)()
            }), r.push(this), this._trigger("ready")
        },
        load: function() {
            var e = this,
                n = this.options;
            n.ajax === !0 ? t.ajax(t.extend({}, n.ajaxSettings, {
                url: n.title,
                error: function() {
                    throw Error("ajax error")
                },
                success: function(t, n) {
                    "success" === n && (e.content = t, e.$container.css({
                        display: "none"
                    }), e.$content.empty().append(e.content), e.$container.removeClass(e.posCss), e.setPosition())
                }
            })) : this.content = n.inline === !0 ? -1 !== n.title.indexOf("+") ? this.$element.next().css({
                display: "block"
            }) : t(n.title).css({
                display: "block"
            }) : n.title
        },
        parseTpl: function(e) {
            var n = {}, i = this;
            return t.each(e, function(t, e) {
                n[t] = e.replace("{{namespace}}", i.namespace)
            }), n
        },
        showLoading: function() {
            this.$content.empty(), this.$loading.css({
                display: "block"
            })
        },
        hideLoading: function() {
            this.$loading.css({
                display: "none"
            })
        },
        setPosition: function() {
            var i, s = this.options,
                o = this.namespace + "-" + s.position;
            if (this.width = this.$container.outerWidth(), this.height = this.$container.outerHeight(), s.mouseTrace !== !0) {
                if (s.autoPosition === !0) {
                    var a, r = [];
                    if (r = s.ajax === !0 && null === this.content ? n(t(this.target)) : n(t(this.target), this.$container), 0 === r.length) a = s.position;
                    else if (1 === r.length) {
                        var c = h[s.position][r[0]];
                        a = void 0 === c ? s.position : c
                    } else {
                        var p = l;
                        t.each(r, function(t, e) {
                            p.replace(e, "")
                        }), a = p
                    }
                    o = this.namespace + "-" + a, i = e(this.target, a, this.width, this.height, this.options.popSpace)
                } else i = e(this.target, s.position, this.width, this.height, this.options.popSpace);
                this.$container.css({
                    display: "block",
                    top: i.top,
                    left: i.left
                })
            }
            this.posCss = o, this.$container.addClass(o)
        },
        _trigger: function(t) {
            this.$element.trigger("asColorInput::" + t, this), this.$element.trigger(t + ".asColorInput", this), t = t.replace(/\b\w+\b/g, function(t) {
                return t.substring(0, 1).toUpperCase() + t.substring(1)
            });
            var e = "on" + t,
                n = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : void 0;
            "function" == typeof this.options[e] && this.options[e].apply(this, n)
        },
        show: function() {
            var e = this.options,
                n = this;
            if (this.enabled) return this.onlyOne && t.each(r, function(t, e) {
                e !== n && e.isOpen && e.hide()
            }), e.closeBtn && this.$container.append(this.$close), this.$container.append(this.$arrow).append(this.$content), this.$element.addClass(this.namespace + "_active"), null === this.content && this.load(), null === this.content ? this.$content.append(this.$loading) : this.$content.empty().append(this.content), e.skin && this.$container.addClass(this.namespace + "_" + e.skin), this.$container.css({
                display: "none",
                top: 0,
                left: 0,
                position: "absolute",
                zIndex: 99990
            }).appendTo(t("body")), this.setPosition(), this._trigger("show"), this.isOpen = !0, this
        },
        hide: function() {
            this.$container.off(".asTooltip"), this._trigger("hide"), this.$element.removeClass(this.namespace + "_active"), this.$container.remove(), this.$container.removeClass(this.posCss), this.isOpen = !1, a = !1
        },
        setContent: function(t) {
            this.content = t
        },
        enable: function() {
            return this.enabled = !0, this.container.addClass(this.namespace + "-enabled"), this
        },
        disable: function() {
            return this.enabled = !1, this.container.removeClass(this.namespace + "-enabled"), this
        },
        destroy: function() {
            this.target.off(".asTooltip")
        }
    }, p.closeAll = function() {
        r.map(function(t) {
            t.isOpen && t.hide()
        })
    }, p.defaults = {
        namespace: "asTooltip",
        skin: null,
        target: null,
        onlyOne: !1,
        trigger: "hover",
        interactive: !1,
        interactiveDelay: 500,
        mouseTrace: !1,
        closeBtn: !1,
        popSpace: 10,
        position: "n",
        autoPosition: !0,
        delay: 0,
        effect: "fade",
        duration: 200,
        inline: !1,
        content: null,
        ajax: !1,
        ajaxSettings: {
            dataType: "html",
            headers: {
                asTooltip: !0
            }
        },
        onShow: null,
        onHide: null,
        onUpdate: null,
        tpl: {
            container: '<div class="{{namespace}}"></div>',
            loading: '<span class="{{namespace}}-loading"></span>',
            content: '<div class="{{namespace}}-content"></div>',
            arrow: '<span class="{{namespace}}-arrow"></span>',
            close: '<a class="{{namespace}}-close"></a>'
        }
    }, t.fn.asTooltip = function(e) {
        if ("string" == typeof e) {
            var n = e,
                i = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : void 0;
            return this.each(function() {
                var e = t.data(this, "asTooltip");
                "function" == typeof e[n] && e[n].apply(e, i)
            })
        }
        return this.each(function() {
            t.data(this, "asTooltip") || t.data(this, "asTooltip", new p(this, e))
        })
    }
})(jQuery);